@inherits LayoutComponentBase
@inject NavigationManager navigationManager

<Layout Sider="true">
	<LayoutSider>
		<LayoutSiderContent>
			<NavMenu></NavMenu>
		</LayoutSiderContent>
	</LayoutSider>
	<Layout>
		<LayoutHeader Fixed="true">
			<Bar Style="height: 64px;" Breakpoint="Breakpoint.Desktop" Background="Background.Primary" ThemeContrast="ThemeContrast.Light">
				<BarBrand>
					<BarItem>
						<BarLink Clicked="ToggleSidebar">
							<Icon Name="menuIcon" />
							Community Italy
						</BarLink>
					</BarItem>
				</BarBrand>
				<BarMenu>					
					<BarEnd>						
						<BarItem>
							<BarLink To="https://github.com/andreatosato/Community-Italy" target="_blank">
								<i class="fab fa-github" style="height:24px;width:24px;vertical-align:top;color:white;" aria-hidden="true"></i>
							</BarLink>
						</BarItem>
					</BarEnd>
				</BarMenu>
			</Bar>
		</LayoutHeader>
		<LayoutContent>
			<BreadcrumCommunity></BreadcrumCommunity>			
			<Container Padding="Padding.Is4.OnX">
				@Body
				<Snackbar @ref="snackbar" Color="snackbarColor">
					<SnackbarBody>
						<span>@messageText</span>
					</SnackbarBody>
					<SnackbarAction Clicked="@(()=> snackbar.Hide())"><Icon Name="IconName.Clear"></Icon></SnackbarAction>
				</Snackbar>
			</Container>
			
		</LayoutContent>
	</Layout>
</Layout>

@code{
	Snackbar snackbar;
	string messageText;
	SnackbarColor snackbarColor;

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
			AppStore.AddMessage = AddMessage;

		return base.OnAfterRenderAsync(firstRender);
	}

	private void AddMessage(NotificationMessage message)
	{
		messageText = message.Message;
		switch (message.NotificationType)
		{
			case NotificationMessage.MessageType.Info:
				snackbarColor = SnackbarColor.Info;
				break;
			case NotificationMessage.MessageType.Success:
				snackbarColor = SnackbarColor.Success;
				break;
			case NotificationMessage.MessageType.Danger:
				snackbarColor = SnackbarColor.Danger;
				break;
			case NotificationMessage.MessageType.Warning:
				snackbarColor = SnackbarColor.Warning;
				break;
			default:
				snackbarColor = SnackbarColor.Info;
				break;
		}

		this.StateHasChanged();
	}

	string menuIcon = "menu";
	void ToggleSidebar()
	{
		if (AppStore.Sidebar.Visible)
			menuIcon = "menu";
		else
			menuIcon = "menu_open";
		AppStore.Sidebar.Toggle();
	}
}