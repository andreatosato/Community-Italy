@page "/event/create"
@inherits Components.ValidationComponent


<EditForm Model="EventViewModel" OnValidSubmit="Success">
	<Validations @ref="Validations" Mode="ValidationMode">
		<Card>
			<CardHeader><CardTitle Size="5">Evento</CardTitle></CardHeader>
			<CardBody>
				<Row>
					<Column ColumnSize="ColumnSize.Is6">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.Name))">
							<TextEdit Placeholder="Nome evento" @bind-Text="EventViewModel.Name">
								<Feedback>
									<ValidationError />
								</Feedback>
							</TextEdit>
						</Validation>
					</Column>
					<Column ColumnSize="ColumnSize.Is6">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.BuyTicket))">
							<Addons>
								<Addon AddonType="AddonType.Body">
									<TextEdit Placeholder="Acquista biglietto" @bind-Text="EventViewModel.BuyTicket">
										<Feedback>
											<ValidationError />
										</Feedback>
									</TextEdit>
								</Addon>
								<Addon AddonType="AddonType.End"><AddonLabel><Icon Name="IconAppName.EventSeat"></Icon></AddonLabel></Addon>
							</Addons>
						</Validation>
					</Column>
				</Row>
				<Row>
					<Column ColumnSize="ColumnSize.Is4">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.StartDate))">
							<DateEdit TValue="DateTime" @bind-Date="@EventViewModel.StartDate">
								<Feedback>
									<ValidationError />
								</Feedback>
							</DateEdit>
						</Validation>
					</Column>
					<Column ColumnSize="ColumnSize.Is2">
						<TimeEdit TValue="TimeSpan" Time="StartHour" TimeChanged="StartDateTimeChanged" />
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.EndDate))">
							<DateEdit TValue="DateTime" @bind-Date="@EventViewModel.EndDate">
								<Feedback>
									<ValidationError />
								</Feedback>
							</DateEdit>
						</Validation>
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<TimeEdit TValue="TimeSpan" Time="EndHour" TimeChanged="EndDateTimeChanged" />
					</Column>
				</Row>
				<Row>
					<Column ColumnSize="ColumnSize.Is6">
						<FileEdit Changed="@FilesReady" Progressed="@OnProgressed" Filter=".jpg, .png, .gif"></FileEdit>
					</Column>
					<Column ColumnSize="ColumnSize.Is6">
						@if (!string.IsNullOrEmpty(ImageUploaded))
						{
							<Figure Size="FigureSize.Is256x256" style="text-align:center">
								<FigureImage Source="@ImageUploaded" AlternateText="@(EventViewModel.CommunityName)" Style="border-color:black; border:2px; max-width:256px;max-height:256px;" />
								<FigureCaption>@EventViewModel.CommunityName</FigureCaption>
							</Figure>
						}
						else if (EventViewModel.Logo != null)
						{
							<Figure Size="FigureSize.Is256x256" style="text-align:center">
								<FigureImage Source="@LinkViewModel.GetImageMedium(EventViewModel.Logo).ToString()" AlternateText="@(EventViewModel.CommunityName)" Style="border-color:black; border:2px;" />
								<FigureCaption>@EventViewModel.CommunityName</FigureCaption>
							</Figure>
						}
					</Column>
				</Row>
			</CardBody>
		</Card>
		<Card>
			<CardHeader><CardTitle Size="5">Call for speaker</CardTitle></CardHeader>
			<CardBody>
				<Row>
					<Column ColumnSize="ColumnSize.Is12">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.CFP.Url))">
							<TextEdit Placeholder="Nome evento" @bind-Text="EventViewModel.CFP.Url">
								<Feedback>
									<ValidationError />
								</Feedback>
							</TextEdit>
						</Validation>
					</Column>
				</Row>
				<Row>
					<Column ColumnSize="ColumnSize.Is4">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.CFP.StartDate))">
							<DateEdit TValue="DateTime" @bind-Date="@EventViewModel.CFP.StartDate">
								<Feedback>
									<ValidationError />
								</Feedback>
							</DateEdit>
						</Validation>
					</Column>
					<Column ColumnSize="ColumnSize.Is2">
						<TimeEdit TValue="TimeSpan" Time="StartCFPHour" TimeChanged="StartDateCFPTimeChanged" />
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<Validation Validator="async e => await ValidateFieldAsync(e, nameof(EventViewModelReadOnly.CFP.EndDate))">
							<DateEdit TValue="DateTime" @bind-Date="@EventViewModel.CFP.EndDate">
								<Feedback>
									<ValidationError />
								</Feedback>
							</DateEdit>
						</Validation>
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<TimeEdit TValue="TimeSpan" Time="EndCFPHour" TimeChanged="EndDateTimeCFPChanged" />
					</Column>
				</Row>
			</CardBody>
		</Card>
		<Card>
			<CardHeader><CardTitle Size="5">Community</CardTitle></CardHeader>
			<CardBody>
				<Row>
					<Column ColumnSize="ColumnSize.Is12">
						<CommunitySelect @bind-CommunitySelected="EventViewModel.CommunityName"></CommunitySelect>
					</Column>
				</Row>
			</CardBody>
		</Card>
		<Row>
			<Column ColumnSize="ColumnSize.Is12" style="text-align: center">
				<Button Type="ButtonType.Submit" Color="Color.Primary"><Icon Name="IconAppName.Save" /> Save</Button>
			</Column>
		</Row>
	</Validations>
</EditForm>

